# ※PHP5.4～
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 無
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
メタ
	エンジン
対話起動_C++	-
対話起動_C#		-
対話起動_VB		-
対話起動_Java	-
対話起動_Scala	$ scala
対話起動_PHP	$ php -a
対話起動_JS		$ node
対話起動_Ruby	$ irb
対話起動_Python	$ python
対話起動_Perl	$ perl -d -e 1

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 変数
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 宣言
入出力
	入出力
		標準出力_C++			std::cout << "Hello\n";
		標準出力_C#				System.Console.WriteLine("Hello");
		標準出力_VB				System.Console.WriteLine("Hello");
		標準出力_Java			System.out.println("Hello");
		標準出力_Scala			System.out.println("Hello");
		標準出力_PHP			print "Hello\n";
		標準出力_JS				console.log("Hello");
		標準出力_Ruby			puts "Hello"
		標準出力_Python			print "Hello"
		標準出力_Perl			print "Hello\n";

		標準入力_C++			string line; std::cin >> line; 
		標準入力_C#				string line = Console.ReadLine();
		標準入力_Java			String line = new Scanner(System.in).readLine();
		標準入力_JS				process.stdin.pipe(require('split')()).on('data', function(line){
									console.log(line);
								})
		標準入力_Ruby			line = STDIN.gets
		標準入力_Python			line = sys.stdin.readline()
		標準入力_Perl			while($line = <STDIN>){
									print "$line\n";
								}

基本
	変数
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 変数宣言
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
変数宣言_C++			int v = 10;
変数宣言_C#				int v = 10;
変数宣言_VB				Dim v As Integer = 10;
変数宣言_Java			int v = 10;
変数宣言_PHP			$v = 10;
変数宣言_JS				var v = 10;
変数宣言_Ruby			v = 10
変数宣言_Python			v = 10
変数宣言_Perl			my $v = 10;

# スコープ
グローバル変数_C++			int g = 10; // 関数外で宣言
グローバル変数_C#			<red>public static</red> class G{
								<red>public static</red> int g = 10;
							}
グローバル変数_VB			<red>public</red> g as Integer = 10;
グローバル変数_Java			<red>public static</red> class G{
								<red>public static</red> int g = 10;
							}
グローバル変数_PHP			<red>global</red> $g = 10;
グローバル変数_JS			<red>window.</red>g = 10;
グローバル変数_Ruby			<red>$</red>g = 10
グローバル変数_Python		<red>global</red> g
グローバル変数_Perl			<red>our</red> $g = 10;

局所変数_C++				{
								int p = 10;
							}
局所変数_C#					{
								int p = 10;
							}
局所変数_Java				{
								int p = 10;
							}
局所変数_VB					If True Then
								Dim p As Integer = 10
							End
局所変数_PHP				function foo(){
								$p = 10;
							}
局所変数_JS					function foo(){
								var p = 10;
							}
局所変数_Ruby				def foo
								p = 10
							end
局所変数_Python				def foo():
								p = 10
局所変数_Perl				{
								<red>my</red> $p = 10;
							}

定数_C++		<red>const</red> int C = 10;
定数_C#			<red>const</red> int C = 10;
定数_VB			<red>Const</red> C As Integer = 10
定数_Java		<red>static final</red> int C = 10;
定数_PHP		<red>define</red>('C', 10);
定数_JS			<red>const</red> C = 10; // ES2015
定数_Ruby		<red>C</red> = 10
定数_Python		-
定数_Perl		<red>use constant</red> C => 10;

行コメント_C++,C#,Java,PHP,JS	// comment
行コメント_VB					' comment
行コメント_Ruby,Python,Perl		＃ comment

ブロックコメント_C++,C#,Java,PHP,JS	/*
									hello
									world
									*/
ブロックコメント_Ruby	=begin
						hello
						world
						=end
ブロックコメント_Python	'''
						文字列リテラルを
						代用
						'''
ブロックコメント_Perl	=pod
						hello
						world
						=cut
ブロックコメント_VB		-

インポート_C++		#include &lt;system.h>
インポート_C#		using System.Text;
インポート_Java		import java.text.*;
インポート_JS		&lt;script src="aaa.js">&lt;/script>
インポート_VB		Declare Function GetTickCount Lib "kernel32" () As Long
インポート_PHP		require('text.php');
インポート_Ruby		require 'text'
インポート_Python	from A import B
インポート_Perl		require CGI;
					use CGI;

# パッケージ、名前空間、モジュール
名前空間_C++		namespace Hoge{
						class A{};
					}
名前空間_C#			namespace Hoge{
						class A{}
					}
名前空間_Java		package com.example.app;
					public class A{
					}
名前空間_Python		＃ hoge.py
					def fuga(n):
						return n + 1
					＃ main.py
					import hoge
					a = hoge.fuga(10)


プリプロセス_C++	#define HOGE
					#ifdef HOGE
					#endif
プリプロセス_C#		#define HOGE
					#if HOGE
					#endif



列挙型_C++			enum MyEnum{
						FOO = 10,
						BAR,
					};
					MyEnum e = FOO;
列挙型_C#			enum MyEnum{
						FOO = 10,
						BAR,
					}
					MyEnum e = MyEnum.FOO;
列挙型_VB			Enum MyEnum
						FOO = 10
						BAR
					End Enum
					Dim e As MyEnum = MyEnum.FOO
列挙型_Java			enum MyEnum{
						FOO,
						BAR,
					}
					MyEnum e = MyEnum.FOO;
列挙型_PHP			(疑似)
					abstract class MyEnum{
						const FOO = 10;
						const BAR = 11;
					}
					$e = MyEnum::FOO;
列挙型_JS			(疑似)
					var MyEnum = {
						FOO : 10,
						BAR : 11,
					};
					var e = MyEnum.FOO;
列挙型_Ruby			(疑似)
					module MyEnum
						FOO = 10
						BAR = 11
					end
					e = MyEnum::FOO
列挙型_Python		(疑似)
					from enum import Enum
					class MyEnum(Enum):
						FOO = 10
						BAR = 11
					e = MyEnum.FOO
列挙型_Perl			(疑似)
					use enum qw(One=1 Ten=10);
					$a = One;

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 構造
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 関数
関数定義_C++		int foo(int a, int b){
						return a + b;
					}
関数利用_C++,C#,Java	int n = foo(10, 20);
関数利用_PHP			$n = foo(10, 20);
関数利用_Perl			my $n = foo(10, 20);
関数利用_JS				var n = foo(10, 20);
関数定義_C#			int foo(int a, int b){
						return a + b;
					}
関数定義_Java		int foo(int a, int b){
						return a + b;
					}
関数定義_PHP		function foo($a, $b){
						return $a + $b;
					}
関数定義_VB			Function foo(ByVal a As Integer, _
								 ByVal b As Integer) As Integer
						foo = a + b # 最近は Return も使えるんだけどね。
					End Function
関数利用_VB			Dim n As Integer = foo(10, 20)
関数定義_JS			function foo(a, b){
						return a + b;
					}
関数定義_Ruby		def foo(a, b)
						return a + b
					end
関数利用_Ruby,Python	n = foo(10, 20)
関数定義_Python		def foo(a, b):
						return a + b
関数定義_Perl		sub foo{
						my ($a, $b) = @_;
						return $a + $b;
					}

C++_参照渡し		void bar(int& r){
						r = 10;
					}
C++_参照渡し利用	int n = 0;
					bar(n);

C#_参照渡し			void bar(out int r){
						r = 10;
					}
C#_参照渡し利用		int n = 0;
					bar(out n);

Java_参照渡し		void bar(Hoge r){
						r.fuga = 10;
					}
Java_参照渡し利用	Hoge h = new Hoge();
					bar(h);

参照渡し_VB			Sub bar(<red>ByRef</red> a As Integer)
						a = 10
					End Sub
参照渡し利用_VB		Dim n As Integer = 0
					bar(n)

参照渡し_PHP		function bar(&$r){
						$r = 10;
					}
参照渡し利用_PHP	$n = 0;
					bar($n);
参照渡し_JS			function bar(r){
						r.fuga = 10;
					}
参照渡し利用_JS		var hoge = {fuga: 0};
					bar(hoge);
参照渡し_Ruby		def bar(r)
						r[0] = 10
					end
参照渡し利用_Ruby	hoge = [0]
					bar(hoge)
Python_参照渡し		def bar(r):
						r["fuga"] = 10
Python_参照渡し利用	hoge = {"fuga": 0}
					bar(hoge)
Perl_参照渡し		sub bar{
						$_[0] = 10;
					}
Perl_参照渡し利用	$a = 1;
					bar($a);
					print "$a\n";

# クラス
クラス_C++


# 数値リテラル
C++_10進					255
C++_16進					0xFF
C++_8進						0377
C++_2進						-

C++14_10進					255
C++14_16進					0xFF
C++14_8進					0377
C++14_2進					0b11111111

C#_10進						255
C#_16進						0xFF
C#_8進						-
C#_2進						-

VB_10進						255
VB_16進						&HFF
VB_8進						&O377
VB_2進						-

MSX-BASIC_2進				&B11111111 # 未検証

Java_10進					255
Java_16進					0xFF
Java_8進					0377
Java_2進					-

# http://php.net/manual/ja/language.types.integer.php
PHP_10進					255
PHP_16進					0xFF
PHP_8進						0377
PHP_2進						0b11111111

JS_10進						255
JS_16進						0xFF
JS_8進						0377
JS_2進						-

# http://js-next.hatenablog.com/entry/2013/07/31/042318
JS新_8進					0o377
JS新_2進					0b11111111

Ruby_10進					255
Ruby_16進					0xFF
Ruby_8進					0377, 0o377
Ruby_2進					0b11111111

# http://www.pythonweb.jp/tutorial/num/index1.html
Python_10進					255
Python_16進					0xFF
Python_8進					0377
Python_2進					0b11111111

Perl_10進					255
Perl_16進					0xFF
Perl_8進					0377
Perl_2進					0b11111111

数値リテラル_C#				255
							0xFF
数値リテラル_Java			10

# 文字
文字_C++,C#						char c = 'A';
文字_Java						char c = 'A';
								char c = '\u0041';
								char c = 65;
文字_PHP,JS,Ruby,Python,VB,Perl	-

変数埋め込み_C++		std::string s = "Hello " + world;
変数埋め込み_C#			string s = "Hello " + world;
変数埋め込み_VB			s = "Hello " & world
変数埋め込み_Java		String s = "Hello " + world;
変数埋め込み_PHP		$s = "Hello " + $world;
変数埋め込み_JS			var s = `Hello ${world}`; // ES2015
変数埋め込み_Ruby		s = "Hello #{world}"
変数埋め込み_Python		s = "Hello %s" % world
変数埋め込み_Perl		my $s = "Hello ${world}";

文字列整形_C++			char f[64];
						sprintf(f, "Hello %04d %s", 10, "World");
# http://msdn.microsoft.com/ja-jp/library/system.string.format%28v=vs.110%29.aspx
文字列整形_C#			string f = String.Format("Hello {0:D4} {1}", 10, "World");
文字列整形_Java			String f = String.format("Hello %04d %s", 10, "World");
文字列整形_PHP			$f = sprintf("Hello %04d %s", 10, "World");
文字列整形_JS			// (ライブラリ利用)
						// https://github.com/alexei/sprintf.js
						var f = sprintf("Hello %04d %s", 10, "World");
文字列整形_VB			Dim f As String = "Hello " & (10).ToString("D4") & " World"
文字列整形_Ruby			f = sprintf("Hello %04d %s", 10, "World")
文字列整形_Python		f = "Hello %04d %s" % (10, "World")
文字列整形_Perl			$f = sprintf("Hello %04d %s", 10, "World");

ヒアドキュメント_C++		std::string s = "Foo\n"
								+ "Bar\n"
								+ "Baz\n";
ヒアドキュメント_C#			string s = @"Foo
							Bar
							Baz";
# <Query> も使えるけど、あまり一般的ではない気がする。 http://qiita.com/alg/items/f0f94902f0d97adcf15d
ヒアドキュメント_VB			s = "Foo" & vbCrLf & _
								"Bar" & vbCrLf & _
								"Baz" & vbCrLf
ヒアドキュメント_Java		string s = "Foo\n"
								+ "Bar\n"
								+ "Baz\n";
ヒアドキュメント_PHP		$s = &lt;&lt;&lt;EOS
							Foo
							Bar
							Baz
							EOS;
ヒアドキュメント_JS			s = "Foo\n\
							Bar\n\
							Baz\
							";
ヒアドキュメント_Ruby		s = &lt;&lt;EOS
							Foo
							Bar
							Baz
							EOS
ヒアドキュメント_Python		s = '''
							Foo
							Bar
							Baz
							'''
ヒアドキュメント_Perl		$s = <<"EOS";
							Foo
							Bar
							Baz
							EOS


制御
	分岐
If分岐_C++					if(a){
								foo();
							}
							else if(b){
								bar();
							}
							else{
								baz();
							}
If分岐_C#					if(a){
								foo();
							}
							else if(b){
								bar();
							}
							else{
								baz();
							}
If分岐_Java					if(a){
								foo();
							}
							else if(b){
								bar();
							}
							else{
								baz();
							}
If分岐_VB					If a Then
								foo()
							ElseIf b Then
								bar()
							Else
								baz()
							End If
If分岐_PHP					if(a){
								foo();
							}
							else if(b){
								bar();
							}
							else{
								baz();
							}
If分岐_JS					if(a){
								foo();
							}
							else if(b){
								bar();
							}
							else{
								baz();
							}
If分岐_Ruby					if a
								foo()
							elsif b
								bar()
							else
								baz()
							end
If分岐_Python				if a:
								foo()
							elif b:
								bar()
							else:
								baz()
If分岐_Perl					if(a){
								foo();
							}
							elsif(b){
								bar();
							}
							else{
								baz();
							}
Switch分岐_C++				switch(a){
							case 0:
								foo();
								break;
							case 1:
								bar();
								break;
							default:
								baz();
								break;
							}
Switch分岐_C#				switch(a){
							case 0:
								foo();
								break;
							case 1:
								bar();
								break;
							default:
								baz();
								break;
							}
Switch分岐_VB				Select Case v
								Case 0
									foo()
								Case 1
									bar()
								Case Else
									baz()
							End Select
Switch分岐_Java				switch(a){
							case 0:
								foo();
								break;
							case 1:
								bar();
								break;
							default:
								baz();
								break;
							}
Switch分岐_PHP				switch(a){
							case 0:
								foo();
								break;
							case 1:
								bar();
								break;
							default:
								baz();
								break;
							}
Switch分岐_JS				switch(a){
							case 0:
								foo();
								break;
							case 1:
								bar();
								break;
							default:
								baz();
								break;
							}
Switch分岐_Ruby				case a
							when 0
								foo()
							when 1
								bar()
							else
								baz()
							end
Switch分岐_Python			-
Switch分岐_Perl				use Switch;
							switch($a){
								case 0 { foo(); }
								case 1 { bar(); }
								else   { baz(); }
							}

For系ループ
Forループ_C++				for(int i = 0; i < 10; i++){
								std::out << i << "\n";
							}
Forループ_C#				for(int i = 0; i < 10; i++){
								System.Console.WriteLine("" + i);
							}
Forループ_Java				for(int i = 0; i < 10; i++){
								System.out.println("" + i);
							}
Forループ_VB				For i = 0 To 9
								System.Console.WriteLine(i)
							Next
Forループ_PHP				for($i = 0; $i < 10; $i++){
								print "$i\n";
							}
Forループ_JS				for(var i = 0; i < 10; i++){
								console.log(i);
							}
Forループ_Ruby				for i in 0..9 do
								puts "#{i}"
							end
Forループ_Python			for i in range(0, 10):
								print i
Forループ_Perl				for(my $i = 0; $i < 10; $i++){
								print "$i\n";
							}
ForEachループ_C++11			for(int e : v){
								std::cout << e;
							}
ForEachループ_C++			std::vector<int> list;
							BOOST_FOREACH(int e, list){
								std::cout << e;
							}
ForEachループ_C#			List<int> list;
							foreach (int e in list){
								Console.WriteLine(e);
							}
ForEachループ_Java			ArrayList<Integer> list;
							for(Integer e : list){
								System.out.println("" + e);
							}
ForEachループ_VB			Dim a As New ArrayList
							For Each e As String In a
								Console.WriteLine(e)
							Next
ForEachループ_PHP			foreach($list as $e){
								print "$e\n";
							}
ForEachループ_JS			list.forEach(function(e, i){
								console.log(e);
							}
ForEachループ_Ruby			list.each do |e|
								puts e
							end
ForEachループ_Python		for e in list:
								print e
ForEachループ_Perl			foreach my $e (@list){
								print "$e\n";
							}

While系ループ
Whileループ_C++				while(a){
								foo();
							}
Whileループ_C#				while(a){
								foo();
							}
Whileループ_Java			while(a){
								foo();
							}
Whileループ_VB				Do While a
								foo()
							Loop
							While a
								foo()
							End While
Whileループ_PHP				while($a){
								foo();
							}
Whileループ_JS				while(a){
								foo();
							}
Whileループ_Ruby			while a
								foo()
							end
Whileループ_Python			while a:
								foo()
Whileループ_Perl			while($a){
								foo();
							}
ジャンプ
ループ抜け_C++					break;
ループ抜け_C#					break;
ループ抜け_Java					break;
ループ抜け_PHP					break;
ループ抜け_JS					break;
ループ抜け_Ruby					break
ループ抜け_Python				break
ループ抜け_Perl					last;
ループ抜け_VB					Exit For
								Exit While
								Exit Do

ループ継続_C++					continue;
ループ継続_C#					continue;
ループ継続_Java					continue;
ループ継続_PHP					continue;
ループ継続_JS					continue;
ループ継続_Ruby					next
ループ継続_Python				continue
ループ継続_Perl					next;
ループ継続_VB					Continue For
								Continue While
								Continue Do								

関数抜け_C++					return v;
関数抜け_C#						return v;
関数抜け_Java					return v;
関数抜け_PHP					return v;
関数抜け_JS						return v;
関数抜け_Ruby					return v
関数抜け_Python					return v
関数抜け_Perl					return v;

例外
例外送出_C++					throw std::exception("msg");
								throw "msg";
								throw 10;
例外送出_C#						throw new Exception("msg");
例外送出_Java					throw new Exception("msg");
例外送出_PHP					throw new Exception("msg");
例外送出_JS						throw new Error("msg");
								throw "msg";
								throw 10;
例外送出_Ruby					raise "msg"
								raise Exception.new("msg")
例外送出_Python					raise Exception("msg")
例外送出_Perl					-

VB_例外送出						Throw New Exception("msg")
VB_例外Catch					' (Try～Catchを使う方法)
								Try
									…
								Catch ex As Exception
									…
								End Try
								.
								' (On Errorを使う方法)
								On Error Goto ErrorLabel
								…
								Exit Sub
								ErrorLabel:
								…

例外Catch_C++					try{
								}
								catch(const std::exception& ex){
								}
								catch(const char* ex){
								}
								catch(int ex){
								}
								catch(...){
								}

例外Catch_C#					try{
								}
								catch(Exception ex){
								}
								catch{
								}
								finally{
								}

例外Catch_Java					try{
								}
								catch(Exception ex){
								}
								finally{
								}

例外Catch_PHP					try{
								}
								catch(Exception $ex){
								}
								finally{ // ※PHP5.5～
								}

例外Catch_JS					try{
								}
								catch(ex){
								}
								finally{
								}

例外Catch_Ruby					begin
									…
								rescue Exception => ex
									…
								rescue => ex
									…
								ensure
									…
								end

例外Catch_Python				try:
									pass
								except Exception as ex:
									pass
								except:
									pass
								else:
									pass
								finally:
									pass

例外Catch_Perl					eval{
									…
								};
								if($@){
									print "Error: $@\n";
								}

# スコープ

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 構造
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# クラス
C++_クラス定義		class A{
					protected:
						int m_n;
					public:
						A(int n) : m_n(n){
							std::cout << "A init\n";
						}
						virtual ~A(){
							std::cout << "A final\n";
						}
						virtual void foo(int n){
							printf("A foo %d %d\n", this->m_n, n);
						}
					};
C++_クラス継承		class B : public A{
					public:
						B(int n) : A(n){
							std::cout << "B init\n";
						}
						~B(){
							std::cout << "B final\n";
						}
						void foo(int n){
							__super::foo(n);
							printf("B foo %d %d\n", this->m_n, n);
						}
					};
C++_クラス利用		B b(10);
					b.foo(20);

C#_クラス定義		class A{
						protected int m_n = 0;
						public A(int n){
							Console.WriteLine("A init");
							m_n = n;
						}
						~A(){
							Console.WriteLine("A final");
						}
						public virtual void foo(int n){
							Console.WriteLine("A foo {0} {1}", this.m_n, n);
						}
					};
C#_クラス継承		class B : A{
						public B(int n) : base(n){
							Console.WriteLine("B init");
						}
						~B(){
							Console.WriteLine("B final");
						}
						public override void foo(int n){
							base.foo(n);
							Console.WriteLine("B foo {0} {1}", this.m_n, n);
						}
					}
C#_クラス利用		B b = new B(10);
					b.foo(20);

Java_クラス定義		public class A{
						protected int m_n = 0;
						public A(int n){
							this.m_n = 0;
							System.out.println("A init");
						}
						public void foo(int n){
							System.out.printf("A foo %d %d\n", this.m_n, n);
						}
					}
Java_クラス継承		public class B extends A{
						public B(int n){
							super(n);
							System.out.println("B init");
						}
						@Override
						public void foo(int n){
							super.foo(n);
							System.out.printf("B foo %d %d\n", this.m_n, n);
						}
					}
Java_クラス利用		B b = new B(10);
					b.foo(20);

PHP_クラス定義		class A{
						protected $m_n = 0;
						public function __construct($n){
							$this->m_n = $n;
							print "A init\n";
						}
						public function __destruct(){
							print "A final\n";
						}
						public function foo($n){
							print "A foo {$this->m_n} {$n}\n";
						}
					}
PHP_クラス継承		class B extends A{
						public function __construct($n){
							parent::__construct($n);
							print "B init\n";
						}
						public function __destruct(){
							print "B final\n";
							parent::__destruct();
						}
						public function foo($n){
							print "B foo {$this->m_n} {$n}\n";
						}
					}
PHP_クラス利用		$b = new B(10);
					$b.foo(20);

JS_クラス定義		var A = function(n){
						console.log("A init");
						this.m_n = n;
					};
					A.prototype.foo = function(n){
						console.log("A foo " + this.m_n + " " + n);
					};
JS_クラス継承		var B = function(n){
						A.call(this, n);
						console.log("B init");
					};
					B.prototype.foo = function(n){
						A.prototype.foo.call(this, n);
						console.log("B foo " + this.m_n + " " + n);
					};
JS_クラス利用		var b = new B(10);
					b.foo(20);

Ruby_クラス定義		class A
						def initialize(n)
							@m_n = n
							puts "A init"
						end
						def foo(n)
							puts "A foo #{@m_n} #{n}"
						end
					end
Ruby_クラス継承		class B < A
						def initialize(n)
							super(n)
							puts "B init"
						end
						def foo(n)
							super(n)
							puts "B foo #{@m_n} #{n}"
						end
					end
Ruby_クラス利用		b = B.new(10)
					b.foo(20)

Python_クラス定義	class A:
						def __init__(self, n):
							print "A init"
							self.m_n = n
						def __del__(self):
							print "A final"
						def foo(self, n):
							print "A foo %d %d" % (self.m_n, n)
Python_クラス継承	class B(A):
						base = A
						def __init__(self, n):
							A.__init__(self, n)
							print "B init"
						def __del__(self):
							print "B final"
							self.base.__del__(self)
						def foo(self, n):
							A.foo(self, n)
							print "B foo %d %d" % (self.m_n, n)
Python_クラス利用	b = B(10)
					b.foo(20)

Perl_クラス定義		package A;
					sub new{
						my $class = shift;
						my $n = shift;
						print "A init\n";
						my $self = {
							m_n => $n,
						};
						return bless $self, $class;
					}
					sub DESTROY{
						my $self = shift;
						print "A final\n";
					}
					sub foo{
						my $self = shift;
						my $n = shift;
						print "A foo $self->{m_n} $n\n";
					}
Perl_クラス継承		package B;
					use base qw(A);
					sub new{
						my $class = shift;
						my $n = shift;
						my $self = A->new($n);
						print "B init\n";
						return bless $self, $class;
					}
					sub DESTROY{
						my $self = shift;
						print "B final\n";
						$self->A::DESTROY();
					}
					sub foo{
						my $self = shift;
						my $n = shift;
						$self->A::foo($n);
						print "B foo $self->{m_n} $n\n";
					}
Perl_クラス利用		package main;
					use B;
					my $b = B->new(10);
					$b->foo(20);
					
VB_クラス定義		Public Class A
						Protected m_n As Integer = 0
						Public Sub New(ByVal n As Integer)
							Me.m_n = n
							Console.WriteLine("A init")
						End Sub
						Protected Overrides Sub Finalize()
							Console.WriteLine("A final")
						End Sub
						Public Overridable Sub foo(ByVal n As Integer)
							Console.WriteLine("A foo {0} {1}", Me.m_n, n)
						End Sub
					End Class
VB_クラス継承		Public Class B
						Inherits A
						.
						Public Sub New(ByVal n As Integer)
							MyBase.New(n)
							Console.WriteLine("B init")
						End Sub
						Protected Overrides Sub Finalize()
							Console.WriteLine("B final")
							MyBase.Finalize()
						End Sub
						Public Overrides Sub foo(ByVal n As Integer)
							MyBase.foo(n)
							Console.WriteLine("B foo {0} {1}", Me.m_n, n)
						End Sub
					End Class
VB_クラス利用		Dim ins As B
					ins = new B(10)
					ins.foo(20)

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 文字列
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 文字列
文字列_C++						std::string s = "ABC\\DEF";
								std::wstring s = L"ABC\\DEF";
文字列_C#						string s = "ABC\\DEF";
								string s = @"ABC\DEF";
文字列_Java						String s = "ABC\\DEF";
								String s = "\u0041BC\\DEF";
文字列_PHP						$s = 'ABC\DEF';
								$s = "ABC\\DEF";
文字列_VB						Dim s As String = "ABC\DEF"
文字列_JS						s = "ABC\\DEF";
								s = 'ABC\\DEF';
文字列_Ruby						s = "ABC\\DEF"
								s = 'ABC\DEF'
文字列_Python					s = "ABC\\DEF"
								s = 'ABC\\DEF'
文字列_Perl						my $s = "ABC\\DEF";
								my $s = 'ABC\DEF';


C++_文字列比較		if(a == b){ … }
					if(a != b){ … }
C++_文字列検索		int pos = a.find("keyword", 0);
C++_文字列抽出		std::string s = a.substr(10, 5);
C++_文字列結合		std::string s = a + b;

C#_文字列比較		if(a == b){ … }
					if(a != b){ … }
C#_文字列検索		int pos = a.IndexOf("keyword");
C#_文字列抽出		string s = a.substr(10, 5);
C#_文字列結合		string s = a + b;

Java_文字列比較		if(a.equals(b)){ … }
					if(!a.equals(b)){ … }
Java_文字列検索		int pos = a.IndexOf("keyword");
Java_文字列抽出		String s = a.substring(10, 15);
Java_文字列結合		String s = a + b;

PHP_文字列比較		if($a === b){ … }
					if($a !== b){ … }
PHP_文字列検索		$pos = strpos($a, "keyword");
PHP_文字列抽出		$s = substr($a, 10, 5);
PHP_文字列結合		$s = $a . $b;

Ruby_文字列比較		if a == b …
					if a != b …
Ruby_文字列検索		pos = a.index("keyword")
Ruby_文字列抽出		s = a[10, 5]
Ruby_文字列結合		c = a + b

Python_文字列比較	if a == b: …
					if a != b: …
Python_文字列検索	pos = a.index("keyword")
Python_文字列抽出	s = a[10:15]
Python_文字列結合	c = a + b

Perl_文字列比較		if($a eq $b){ … }
					if($a ne $b){ … }
Perl_文字列検索		my $pos = index($a, "keyword");
Perl_文字列抽出		my $s = substr($a, 10, 5);
Perl_文字列結合		my $c = $a . $b;

JS_文字列比較		if(a === b){ … }
					if(a !== b){ … }
JS_文字列検索		var pos = a.indexOf("keyword");
JS_文字列抽出		var s = a.substr(10, 5);
					var s = a.substring(10, 15);
JS_文字列結合		my s = a + b;

VB_文字列比較		If a = b Then …
					If a <> b Then …
VB_文字列検索		Dim pos As Integer = InStr(1, a, "keyword")
VB_文字列抽出		Dim s As String = Mid(a, 10, 5)
VB_文字列結合		Dim s As String = a & b

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 演算
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# ひとつひとつなケース
論理OR_C++		a = b || c;
論理AND_C++		a = b && c;
論理NOT_C++		a = !b;

論理OR_C#		a = b || c;
論理AND_C#		a = b && c;
論理NOT_C#		a = !b;

論理OR_Java		a = b || c;
論理AND_Java	a = b && c;
論理NOT_Java	a = !b;

論理OR_VB		a = b Or c
論理AND_VB		a = b And c
論理NOT_VB		a = Not b

論理OR_PHP		a = $b || $c;
論理AND_PHP		a = $b && $c;
論理NOT_PHP		a = !$b;

論理OR_JS		a = b || c;
論理AND_JS		a = b && c;
論理NOT_JS		a = !b;

論理OR_Ruby		a = b || c
				a = (b or c)
論理AND_Ruby	a = b && c
				a = (b or c)
論理NOT_Ruby	a = !b
				a = (not b)

論理OR_Python	a = b || c;
論理AND_Python	a = b && c;
論理NOT_Python	a = !b;

論理OR_Perl		$a = $b || $c;
				$a = ($b or $c);
論理AND_Perl	$a = $b && $c;
				$a = ($b and $c);
論理NOT_Perl	$a = !$b;
				$a = not $b;


# まとめたケース
論理演算_C++	a = b || c;
				a = b && c;
				a = !b;
ビット演算_C++	a = b | c;
				a = b & c;
				a = b ^ c;
				a = ~b;
四則演算_C++	a = b + c;
				a = b - c;
				a = b * c;
				a = b / c;
				a = b % c;

論理演算_C#		a = b || c;
				a = b && c;
				a = !b;
ビット演算_C#	a = b | c;
				a = b & c;
				a = b ^ c;
				a = ~b;
四則演算_C#		a = b + c;
				a = b - c;
				a = b * c;
				a = b / c;
				a = b % c;

論理演算_Java	a = b || c;
				a = b && c;
				a = !b;
ビット演算_Java	a = b | c;
				a = b & c;
				a = b ^ c;
				a = ~b;
四則演算_Java	a = b + c;
				a = b - c;
				a = b * c;
				a = b / c;
				a = b % c;

論理演算_VB		a = b Or c
				a = b And c
				a = Not b
ビット演算_VB	a = b Or c
				a = b And c
				a = b Xor c
				a = Not b
四則演算_VB		a = b + c
				a = b - c
				a = b * c
				a = b / c
				a = b Mod c

論理演算_PHP	a = b || c;
				a = b && c;
				a = !b;
ビット演算_PHP	a = b | c;
				a = b & c;
				a = b ^ c;
				a = ~b;
四則演算_PHP	a = b + c;
				a = b - c;
				a = b * c;
				a = b / c;
				a = b % c;

論理演算_JS		a = b || c;
				a = b && c;
				a = !b;
ビット演算_JS	a = b | c;
				a = b & c;
				a = b ^ c;
				a = ~b;
四則演算_JS		a = b + c;
				a = b - c;
				a = b * c;
				a = b / c;
				a = b % c;

論理演算_Ruby		a = b || c
					a = (b or c)
					a = b && c
					a = (b and c)
					a = !b
					a = (not b)
ビット演算_Ruby		a = b | c
					a = b & c
					a = b ^ c
					a = ~b
四則演算_Ruby		a = b + c
					a = b - c
					a = b * c
					a = b / c
					a = b % c



論理演算_Perl		$a = $b || $c;
					$a = ($b or $c);
					$a = $b && $c;
					$a = ($b and $c);
					$a = !$b;
					$a = not !$b;
ビット演算_Perl		$a = $b | $c;
					$a = $b & $c;
					$a = $b ^ $c;
					$a = ~$b;
四則演算_Perl		$a = $b + $c;
					$a = $b - $c;
					$a = $b * $c;
					$a = $b / $c;
					$a = $b % $c;

# 余りとか %, Mod

# True, False
C++_True定数		true
C++_False定数		false
C++_True判定		False判定以外
C++_False判定		false, 0, NULL
C++_無効値定数		false
					NULL
C++_無効値判定		if(boolValue){ … }
					if(pointerValue){ … }
					if(pointerValue != NULL){ … }

C#_True定数			true
C#_False定数		false
C#_True判定			true
C#_False判定		false
C#_無効値定数		false
					null
C#_無効値判定		if(boolValue){ … }
					if(refValue != null){ … }

Java_True定数		true
Java_False定数		false
Java_True判定		true
Java_False判定		false
Java_無効値定数		false
					null
Java_無効値判定		if(boolValue){ … }
					if(refValue != null){ … }

VB_True定数			True
VB_False定数		False
VB_True判定			True
VB_False判定		False
VB_無効値定数		Nothing
					vbEmpty
					vbNull
					vbNullString
					String.Empty
					Double.NaN
VB_無効値判定		If Not IsNothing(v) Then …
					If Not v Is Nothing Then …
					If Not String.IsNullOrEmpty(v) Then …
					If Not Double.IsNaN(v) Then …

# Nullableあたりもそのうち。		
					
					
# http://php.net/manual/ja/types.comparisons.php
PHP_True定数		TRUE (※大小文字区別無)
PHP_False定数		FALSE (※大小文字区別無)
PHP_True判定		False判定以外
PHP_False判定		FALSE, 0, NULL, '', '0', [], 未定義
PHP_無効値定数		FALSE
					NULL
PHP_無効値判定		if(!empty($v)){ … }
					if(!is_null($v)){ … }
					if(!isset($v)){ … }
					if($v){ … }

# http://qiita.com/phi/items/723aa59851b0716a87e3
JS_True定数			true
JS_False定数		false
JS_True判定			False判定以外 # [], '0' 等はTrue扱い
JS_False判定		false, undefined, null, NaN, 0, ''
JS_無効値定数		undefined
					null
					NaN
JS_無効値判定		if(v){ … }
					if(v !== null){ … }
					if(typeof v !== 'undefined'){ … ]
					if(!Number.isNaN(v)){ … }
					

# http://qiita.com/sgtn/items/0cb16ef16d938cf98094
# http://qiita.com/ryosy383/items/155badd87fdc1bd0919d
# http://d.hatena.ne.jp/yk5656/20140317/1395559495
Ruby_True定数		true		
Ruby_False定数		false
Ruby_True判定		False判定以外 # 0はTrue扱い
Ruby_False判定		false, nil
Ruby_無効値定数		false
					nil
Ruby_無効値判定		if !v.nil? …
					if !v.empty? …
					if !v.blank? …

# ※ v.present? ってのもあるけど、これはRubyじゃなくてRailsの拡張らしい。

Python_論理演算		a = b or c;
					a = b and c;
					a = not b;
Python_ビット演算	a = b | c;
					a = b & c;
					a = b ^ c;
					a = ~b;
Python_四則演算		a = b + c;
					a = b - c;
					a = b * c;
					a = b / c;
Python_True定数		True
Python_False定数	False
Python_True判定		False判定以外
Python_False判定	False, 0, '', (), [], {}
Python_無効値定数	False, None
Python_無効値判定	if(v): …
					if(v is not None): …

Perl_True定数		-
Perl_False定数		-
Perl_True判定		False判定以外
Perl_False判定		0, '', '0'
Perl_無効値定数		-
Perl_無効値判定		if($v){ … }
					if(defined($v)){ … }

ビットOR_C++		a = b | c;
ビットAND_C++		a = b & c;
ビットXOR_C++		a = b ^ c;
ビットNOT_C++		a = ~b;
ビットシフト_C++,C#,Java,JS		a = b << 2;
								a = b >> 2;
ビットシフト_VB,Ruby,Python		a = b << 2
								a = b >> 2
ビットシフト_PHP,Perl			$a = $b << 2;
								$a = $b >> 2;

ビットOR_C#			a = b | c;
ビットAND_C#		a = b & c;
ビットXOR_C#		a = b ^ c;
ビットNOT_C#		a = ~b;

ビットOR_Java		a = b | c;
ビットAND_Java		a = b & c;
ビットXOR_Java		a = b ^ c;
ビットNOT_Java		a = ~b;

ビットOR_VB			a = b Or c
ビットAND_VB		a = b And c
ビットXOR_VB		a = b Xor c
ビットNOT_VB		a = Not b

ビットOR_PHP		$a = $b | $c;
ビットAND_PHP		$a = $b & $c;
ビットXOR_PHP		$a = $b ^ $c;
ビットNOT_PHP		$a = ~$b;

ビットOR_JS			a = b | c;
ビットAND_JS		a = b & c;
ビットXOR_JS		a = b ^ c;
ビットNOT_JS		a = ~b;

ビットOR_Ruby		a = b | c
ビットAND_Ruby		a = b & c
ビットXOR_Ruby		a = b ^ c
ビットNOT_Ruby		a = ~b

ビットOR_Python		a = b | c;
ビットAND_Python	a = b & c;
ビットXOR_Python	a = b ^ c;
ビットNOT_Python	a = ~b;

ビットOR_Perl		$a = $b | $c;
ビットAND_Perl		$a = $b & $c;
ビットXOR_Perl		$a = $b ^ $c;
ビットNOT_Perl		$a = ~$b;

# flips every bit, bitwide not


# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 無効値
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
無効値_Ruby				nil

BOOL無効値_C++			false
BOOL無効値_C#			false
BOOL無効値_Java			false
BOOL無効値_PHP			false
BOOL無効値_JS			false
BOOL無効値_Ruby			未
BOOL無効値_Python		未
BOOL無効値_Perl			未

参照無効値_C++			NULL
参照無効値_C＃			null
参照無効値_Java			null
参照無効値_PHP			$v = 10;
参照無効値_JS			null
						undefined
参照無効値_Ruby			nil
参照無効値_Python		None
参照無効値_Perl			undefined



# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 配列
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
配列確保_C++			int v[] = {10, 20};
配列確保_C＃			int[] v = new int[]{10, 20};
配列確保_Java			int[] v = new int[]{10, 20};
配列確保_PHP			$v = [10, 20];
配列確保_JS				var v = [10, 20];
配列確保_Ruby			v = [10, 20];
配列確保_Python			v = [10, 20];
配列確保_Perl			my @v = (10, 20);

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 制御構造
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 分岐
# クラス定義
# 関数定義
